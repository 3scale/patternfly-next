/// The container layout is used to horizontally center the children
/// @group mixins
/// @moduleType layout
/// @author Cliff Pyles <cpyles@redhat.com>
/// @parameter {Length} $maximum-width [1280px] the maximum width of the container
@mixin container($maximum-width: 1280px) {
  display: grid;
  grid-template: auto / 100%;
  justify-items: center;
  & > *,
  & > &__item {
    max-width: $maximum-width;
  }
}

/// The level layout positions the immediate children in one direction (on the same axis), and centers them in the opposing direction (on the other axis).
/// @group mixins
/// @moduleType layout
/// @author Cliff Pyles <cpyles@redhat.com>
/// @todo add support for vertical level
/// @todo add switch to vertical for smaller viewports
@mixin level {
  display: flex;
  align-items: center;
  justify-content: space-between;

  & > &__items {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
}

/// The mask layout pushes some of the child items outside of the viewport.
/// @group mixins
/// @moduleType layout
/// @author Cliff Pyles <cpyles@redhat.com>
/// @modifier is-vertical - Positions the masked items vertically
/// @modifier is-active - Indicates which child items are visible
@mixin mask {
  position: relative;
  display: flex;
  max-width: 100%;
  overflow: hidden;
  &.is-vertical {
    flex-direction: column;
  }

  & > *,
  & > &__item {
    position: absolute;
    top: 100%;
    order: 1;
    flex-shrink: 0;
  }

  & > .is-active {
    position: static;
    top: auto;
    flex-grow: 1;
    order: 0;
  }
}

/// The overlay layout is used to break content out of the default flow of content.
/// @group mixins
/// @moduleType layout
/// @author Cliff Pyles <cpyles@redhat.com>
/// @modifier is-top-half - places the content on the top half of the viewport
/// @modifier is-bottom-half - places the content on the bottom half of the viewport
/// @modifier is-left-half - places the content on the left half of the viewport
/// @modifier is-right-half - places the content on the right half of the viewport
@mixin overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;

  &.is-top-half {
    top: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 50vh;
  }

  &.is-bottom-half {
    top: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 50vh;
  }

  &.is-left-half {
    top: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 50vh;
  }

  &.is-right-half {
    top: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 50vh;
  }
}

/// The split layout positions the children horizontally
/// @group mixins
/// @moduleType layout
/// @author Cliff Pyles <cpyles@redhat.com>
/// @modifier is-equal distributes the children evenly
/// @modifier is-even distributes the children evenly (alias of is-equal)
@mixin split {
  display: grid;
  grid-template-columns: 1fr 2fr;
  grid-auto-flow: column;

  &.is-equal,
  &.is-even {
    grid-template-columns: 1fr;
  }
}

/// The stack layout is used to layer child items on top of each other, so that only one is visible at any given time.
/// @group mixins
/// @moduleType layout
/// @author Cliff Pyles <cpyles@redhat.com>
/// @modifier is-active - indicates that a child item should be visible
@mixin stack {
  display: grid;
  grid-template: 100% / 100%;

  & > *,
  & > &__item {
    display: none;
    grid-column-start: 1;
    grid-row-start: 1;
  }

  & > .is-active {
    display: block;
  }
}

/// The tile board layout is meant to display items in a grid like fashion.
/// @group mixins
/// @moduleType layout
/// @author Cliff Pyles <cpyles@redhat.com>
/// @parameter {Number} $columns [5] the number of columns in the tile-board (default - 5)
@mixin tile-board($columns: 5) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
}
